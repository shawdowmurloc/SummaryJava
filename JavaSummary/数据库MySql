1.MySql的逻辑架构了解吗？
（1）服务器层 主要提供连接处理、授权认证、安全
（2）MySql核心服务层
包括查询解析、分析、优化、缓存

（3）存储引擎层







2.谈谈MySql读写锁？






3.Mysql的锁策略有什么？
表锁



行锁






4.数据库的死锁如何解决？







5.什么是事务？







6.说说事务的特性有什么？？
ACID
原子性
一致性
隔离性
持久性








7.Mysql的隔离级别有哪些？
读未提交

读提交

可重复读


序列化





8.谈谈MVCC？




9.谈谈InnoDB？






10.谈谈MyISAM?





11.谈谈Memory?







12.数据库中查询执行的流程是什么？？






13.VARCHAR和CHAR的区别？









14.DATATIME和TIMESTAMP的区别？







15.数据库中数据类型的优化策略？






16.数据库中的索引有什么作用？
索引也叫键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能很关键。
索引大大减少了服务器需要扫描的数据量、可以帮助服务器避免排序和临时表、可以将随机 IO 变成顺序 IO。
在MySQL中，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。
索引可以包括一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为 MySQL 只能使用索引的最左前缀。




17.聊一下B-Tree索引？
 InnoDB 使用 B+ Tree。
 B-Tree 索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。
 根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。
通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么找到对应的值，要么该记录不存在。叶子节点的指针指向的是被索引的数据，而不是其他的节点页。

限制：
1.
如果不是按照索引的最左列开始查找，则无法使用索引。
2.
不能跳过索引中的列，例如索引为 (id,name,sex)，不能只使用 id 和 sex 而跳过 name。
3.
如果查询中有某个列的范围查询，则其右边的所有列都无法使用索引。

18.聊聊Hash索引？
哈希索引基于哈希表实现，只有精确匹配索引所有列的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，并且不同键值的行计算出的哈希码也不一样。
哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。
因为索引自身只需存储对应的哈希值，所以索引的结构十分紧凑，这让哈希索引的速度非常快


限制：
1.
哈希索引数据不是按照索引值顺序存储的，无法用于排序。
2.
哈希索引不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。
例如在数据列(a,b)上建立哈希索引，如果查询的列只有a就无法使用该索引。
3.
哈希索引只支持等值比较查询，不支持任何范围查询。



19.聊聊自适应Hash索引？
自适应哈希索引是 InnoDB 引擎的一个特殊功能，当它注意到某些索引值被使用的非常频繁时，会在内存中基于 B-Tree 索引之上再创键一个哈希索引，
这样就让 B-Tree 索引也具有哈希索引的一些优点，比如快速哈希查找。这是一个完全自动的内部行为，用户无法控制或配置，但如果有必要可以关闭该功能。



20.聊聊空间索引？
MyISAM 表支持空间索引，可以用作地理数据存储。和 B-Tree 索引不同，这类索引无需前缀查询。
空间索引会从所有维度来索引数据，查询时可以有效地使用任意维度来组合查询。必须使用 MySQL 的 GIS 即地理信息系统的相关函数来维护数据，但 MySQL 对 GIS 的支持并不完善，因此大部分人都不会使用这个特性。



21.聊聊全文索引？
通过数值比较、范围过滤等就可以完成绝大多数需要的查询，但如果希望通过关键字匹配进行查询，就需要基于相似度的查询，而不是精确的数值比较，全文索引就是为这种场景设计的。
MyISAM 的全文索引是一种特殊的 B-Tree 索引，一共有两层。
第一层是所有关键字，然后对于每一个关键字的第二层，包含的是一组相关的"文档指针"。
全文索引不会索引文档对象中的所有词语，它会根据规则过滤掉一些词语，例如停用词列表中的词都不会被索引。




22.聊聊聚簇索引？
聚簇索引不是一种索引类型，而是一种数据存储方式。
InnoDB 的聚簇索引实际上在同一个结构中保存了 B-Tree 索引和数据行。
当表有聚簇索引时，它的行数据实际上存放在索引的叶子页中，因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。


优点：
1.可以把相关数据保存在一起。
2. 数据访问更快，聚簇索引将索引和数据保存在同一个 B-Tree 中，因此获取数据比非聚簇索引要更快。
3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。

缺点：
1.聚簇索引最大限度提高了 IO 密集型应用的性能，如果数据全部在内存中将会失去优势。
2.更新聚簇索引列的代价很高，因为会强制每个被更新的行移动到新位置。
3.基于聚簇索引的表插入新行或主键被更新导致行移动时，可能导致页分裂，表会占用更多磁盘空间。
4.当行稀疏或由于页分裂导致数据存储不连续时，全表扫描可能很慢。


23.








24.索引有哪些使用原则？
（1）建立索引


（2）使用前缀索引


（3）选择合适的索引顺序



（4）删除无用的索引



25.索引失效的原因有哪些？？
1.如果索引列出现了隐式类型转换，Mysql不会使用索引。
常见的情况是在SQl的where条件中，字段类型为字符串，其值为数值，如果没有加引号那么MySQl不会使用索引。
2.如果where条件中含有Or，除非OR前使用了索引列而OR之后使用的是非索引列，索引会失效。
3.MySQL 不能在索引中执行 LIKE 操作，这是底层存储引擎 API 的限制，最左匹配的 LIKE 比较会被转换为简单的比较操作，
但如果是以通配符开头的 LIKE 查询，存储引擎就无法做比较。这种情况下 MySQL 只能提取数据行的值而不是索引值来做比较。
4.如果查询中的列不是独立的，则 MySQL 不会使用索引。独立的列是指索引列不能是表达式的一部分，也不能是函数的参数。
5.对于多个范围条件查询，MySql无法使用第一个范维列后面的其他索引列，对于多个等值查询没有这个限制。
6.如果 MySQL 判断全表扫描比使用索引查询更快，则不会使用索引。
7.索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。



26.如何定位低效SQL？
（1）通过慢查询日志定位：
通过慢查询日志定位那些已经执行完毕的 SQL 语句。
（2）使用 SHOW PROCESSLIST 查询：
可以使用 SHOW PROCESSLIST 命令查看当前 MySQL 正在进行的线程，包括线程的状态、是否锁表等，可以实时查看 SQL 的执行情况，同时对一些锁表操作进行优化。


27.SHOW PROFILE 的作用
通过 SHOW PROFILE 可以分析 SQL 语句性能消耗
例如查询到 SQL 会执行多少时间，并显示 CPU、内存使用量，执行过程中系统锁及表锁的花费时间等信息
例如 SHOW PROFILE CPU/MEMORY/BLOCK IO FOR QUERY N 分别查询 id 为 N 的 SQL 语句的 CPU、内存以及 IO 的消耗情况。


28.trace是干什么的？
从 MySQL5.6 开始，可以通过 trace 文件进一步获取优化器是是如何选择执行计划的，
在使用时需要先打开设置，然后执行一次 SQL，最后查看 information_schema.optimizer_trace 表而都内容，该表为联合i表，只能在当前会话进行查询，每次查询后返回的都是最近一次执行的 SQL 语句。



29.EXPLAIN的字段有哪些，具体含义都有什么？




30.有哪些优化SQL的策略？




31.MySql主从复制的作用？



32.Mysql主从复制的步骤？






























-