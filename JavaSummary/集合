1.说说ArrayList
非线程安全，数组实现，扩容时会创建更大的数组，把原有的数组复制到新数组
支持对其中元素的快速随机访问，但是插入和删除的速度慢

2.说说LinkedList
双向链表实现，与ArrayList相比插入和删除速度快，但是随机访问很慢
除了继承AbstractList以外还实现了Deque接口，这个Deque接口具有队列和栈的性质
优点是在于可以将零散的内存单元通过附加引用的方式关联起来，形成按链路顺序查找的线性结构，内存利用率高

3.Set有什么特点？有哪些实现？
不允许元素重复，而且无序，通常实现有HashSet LinkedHashSet TreeSet
HashSet线程不安全， 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，所有 Key 都使用相同的 Value ，一个名为 PRESENT 的 Object 类型常量。
HashSet 判断元素是否相同时,对于包装类型直接按值比较。对于引用类型先比较 hashCode 是否相同，不同则代表不是同一个对象，相同则继续比较 equals，都相同才是同一个对象。
LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。
TreeSet 通过 TreeMap 实现的，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。


4.HashMap为什么线程不安全
JDK7存在死循环和数据丢失的问题
1.死循环：扩容时，resize调用transfer使用头插法迁移元素，虽然newtable是局部变量，但是原先table中的Entry链表是共享的，
问题根源是Entry的next指针并发修改，某线程还没有将tabel设置为newTable时用完了CPU的时间片，导致数据丢失或死循环
JDK8中在resize方法中完成扩容，采用尾插法，不会产生死循环，但是并发下还可能丢失数据
应该使用concurrentHashMap或者Collections.synchronizedMap包装的集合
2.数据丢失：
（1）并发赋值被覆盖
 在 createEntry 方法中，新添加的元素直接放在头部，使元素之后可以被更快访问，但如果两个线程同时执行到此处，会导致其中一个线程的赋值被覆盖。
（2）已遍历区间新增元素的丢失
 当某个线程在 transfer 方法迁移时，其他线程新增的元素可能落在已遍历过的哈希槽上。遍历完成后，table 数组引用指向了 newTable，新增元素丢失。
（3）新表被覆盖
如果 resize 完成，执行了 table = newTable，则后续元素就可以在新表上进行插入。
但如果多线程同时 resize ，每个线程都会 new 一个数组，这是线程内的局部对象，线程之间不可见。迁移完成后resize 的线程会赋值给 table 线程共享变量，可能会覆盖其他线程的操作，在新表中插入的对象都会被丢弃。


5.HashMap相关方法的源码







6.HashMap有什么特点？
JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树，节点类型从Entry 变更为 Node
table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。
HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上，为使查询效率尽可能高，键的 hash 值要尽可能分散。
HashMap 默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1<< 30 、默认加载因子为 0.75。



7.TreeMap有什么特点？
TreeMap 基于红黑树实现，增删改查的平均和最差时间复杂度均为 O(logn) ，最大特点是 Key 有序。
Key 必须实现 Comparable 接口或提供的 Comparator 比较器，所以 Key 不允许为 null。
HashMap 依靠 hashCode 和 equals 去重，而 TreeMap 依靠 Comparable 或 Comparator。
TreeMap 排序时，如果比较器不为空就会优先使用比较器的 compare 方法，否则使用 Key 实现的 Comparable 的 compareTo 方法，两者都不满足会抛出异常。


8.list set map
list顺序存储
set独一无二
map key搜索专家

9.arraylist linkedlist区别
1）.都不保证线程安全
2）.arratlist底层Object数组
Linkedlist底层双向链表
3）.插入和删除受元素位置影响，arraylist数组存储，arraylist默认将指定元素追加到此列表末尾，指定位置的话需移动元素
linkedlist采用链表存储，删除元素不受元素位置影响，在指定位置插入、删除元素需要先移动到指定位置再插入
4） arraylist支持快速随机访问，linkedlist不支持高效的随机元素访问
5）arraylist的空间浪费体现在list列表的结尾一定会预留一定的容量空间，
linkedlist的空间花费体现在它的每一个元素都需要消耗比Arraylist更多的空间


10.arraylist和vector的区别
vector类的所有方法都是同步的，
arraylist不是同步的，不需要保证线程安全的时候建议Arraylist

11.arraylist的扩容机制

12.hashmap和hashtable的区别
hashmap非线程安全，hashtable线程安全
hashmap效率高一些
hashmap null可以作为键，可以有一个或者多个键对应的值为null
hashtable一旦put进一个键为null就直接抛出nullpointerexception
hashmap默认初始值大小为16，之后每一次扩充容量变为原来的两倍，hashtable初始大小11，每次扩充容量变为原来的2n+1
创建时如果给定初始容量值，hashtable会直接给定大小，但是hashmap会将其扩充为2的幂次方大小



object类有哪些方法
1．clone方法
保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。

主要是JAVA里除了8种基本类型传参数是值传递，其他的类对象传参数都是引用传递，我们有时候不希望在方法里讲参数改变，这是就需要在类中复写clone方法。

2．getClass方法

final方法，获得运行时类型。

3．toString方法

该方法用得比较多，一般子类都有覆盖。

4．finalize方法

该方法用于释放资源。因为无法确定该方法什么时候被调用，很少使用。

5．equals方法

该方法是非常重要的一个方法。一般equals和==是不一样的，但是在Object中两者是一样的。子类一般都要重写这个方法。

6．hashCode方法

该方法用于哈希查找，可以减少在查找中使用equals的次数，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。

一般必须满足obj1.equals(obj2)==true。可以推出obj1.hashCode()==obj2.hashCode()，但是hashCode相等不一定就满足equals。不过为了提高效率，应该尽量使上面两个条件接近等价。

如果不重写hashcode(),在HashSet中添加两个equals的对象，会将两个对象都加入进去。

7．wait方法

wait方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait()方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。

调用该方法后当前线程进入睡眠状态，直到以下事件发生。

（1）其他线程调用了该对象的notify方法。

（2）其他线程调用了该对象的notifyAll方法。

（3）其他线程调用了interrupt中断该线程。

（4）时间间隔到了。

此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。

8．notify方法

该方法唤醒在该对象上等待的某个线程。

9．notifyAll方法

该方法唤醒在该对象上等待的所有线程。