一。常用操作以及概念
ctrl c 中断正在运行的程序
ctrl d 结束键盘输入

--help 指令的基本用法与选项

man 是 manual 的缩写，将指令的具体信息显示出来。

info 与man类似但是 info 将文档分成一个个页面，每个页面可以跳转。

关机：
shutdown
who
sync  为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘，因此关机之前需要先进行 sync 同步操作。


sudo 允许一般用户使用 root 可执行的命令，不过只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。

ls 列出文件或者目录的信息，目录的信息就是其中包含的文件。
## ls [-aAdfFhilnrRSt] file|dir
-a ：列出全部的文件
-d ：仅列出目录本身
-l ：以长数据串行列出，包含文件的属性与权限等等数据

cd 更换当前目录。

mkdir 创建目录。

rmdir 删除目录，目录必须为空。
rmdir [-p] 目录名称
-p ：递归删除目录

touch 更新文件时间或者建立新文件。
## touch [-acdmt] filename
-a ： 更新 atime
-c ： 更新 ctime，若该文件不存在则不建立新文件
-m ： 更新 mtime
-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date="日期或时间"
-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]


cp复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。
cp [-adfilprsu] source destination
-a ：相当于 -dr --preserve=all
-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身
-i ：若目标文件已经存在时，在覆盖前会先询问
-p ：连同文件的属性一起复制过去
-r ：递归复制
-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制
--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了


rm 删除文件
## rm [-fir] 文件或目录
-r ：递归删除


mv 移动文件
## mv [-fiu] source destination
## mv [options] source1 source2 source3 .... directory
-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖


cat获取文件内容
## cat [-AbEnTv] filename
-n ：打印出行号，连同空白行也会有行号，-b 不会


tac  是 cat 的反向操作，从最后一行开始打印。

more   和 cat 不同的是它可以一页一页查看文件内容，比较适合大文件的查看。

less  和 more 类似，但是多了一个向前翻页的功能。


head 取得文件前几行。
## head [-n number] filename
-n ：后面接数字，代表显示几行的意思

tail   是 head 的反向操作，只是取得是后几行。

od 以字符或者十六进制的形式显示二进制文件。


which 指令搜索。
## which [-a] command
-a ：将所有指令列出，而不是只列第一个


whereis 文件搜索。速度比较快，因为它只搜索几个特定的目录。
## whereis [-bmsu] dirname/filename


locate 文件搜索 可以用关键字或者正则表达式进行搜索。

find 文件搜索 可以使用文件的属性和权限进行搜索。

-mtime  n ：列出在 n 天前的那一天修改过内容的文件
-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件
-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件
-newer file ： 列出比 file 更新的文件


压缩和打包
gzip
gzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。
使用 zcat、zmore、zless 来读取压缩文件的内容。
$ gzip [-cdtv#] filename
-c ：将压缩的数据输出到屏幕上
-d ：解压缩
-t ：检验压缩文件是否出错
-v ：显示压缩比等信息
-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6


bzip2 提供比 gzip 更高的压缩比。
查看命令：bzcat、bzmore、bzless、bzgrep。
$ bzip2 [-cdkzv#] filename
-k ：保留源文件


xz  提供比 bzip2 更佳的压缩比。
查看命令：xzcat、xzmore、xzless、xzgrep。
$ xz [-dtlkc#] filename


打包
tar 不仅可以用于打包，也可以使用 gzip、bzip2、xz 将打包文件进行压缩。
$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename...  ==打包压缩
$ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件]              ==查看
$ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录]    ==解压缩
-z ：使用 zip；
-j ：使用 bzip2；
-J ：使用 xz；
-c ：新建打包文件；
-t ：查看打包文件里面有哪些文件；
-x ：解打包或解压缩的功能；
-v ：在压缩/解压缩的过程中，显示正在处理的文件名；
-f : filename：要处理的文件；
-C 目录 ： 在特定目录解压缩。


管道指令：
管道是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个步骤的处理之后才能得到我们想要的内容时就可以使用管道。
cut 对数据进行切分，取出想要的部分。
$ cut
-d ：分隔符
-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间
-c ：以字符为单位取出区间


排序指令：
sort 用于排序
$ sort [-fbMnrtuk] [file or stdin]
-f ：忽略大小写
-b ：忽略最前面的空格
-M ：以月份的名字来排序，例如 JAN，DEC
-n ：使用数字
-r ：反向排序
-u ：相当于 unique，重复的内容只出现一次
-t ：分隔符，默认为 tab
-k ：指定排序的区间


uniq 可以将重复的数据只取一个。
$ uniq [-ic]
-i ：忽略大小写
-c ：进行计数

双向输出重定向
使用 tee 指令，一个输出会同时传送到文件和屏幕上。
$ tee [-a] file


tr 用来删除一行中的字符，或者对字符进行替换。
$ tr [-ds] SET1 ...
-d ： 删除行中 SET1 这个字符串


col
col 将 tab 字符转为空格字符。
$ col [-xb]
-x ： 将 tab 键转换成对等的空格键

expand 将 tab 转换一定数量的空格，默认是 8 个。
$ expand [-t] file
-t ：tab 转为空格的数量


join 将有相同数据的那一行合并在一起。
$ join [-ti12] file1 file2
-t ：分隔符，默认为空格
-i ：忽略大小写的差异
-1 ：第一个文件所用的比较字段
-2 ：第二个文件所用的比较字段

paste 直接将两行粘贴在一起。
$ paste [-d] file1 file2
-d ：分隔符，默认为 tab


split 将一个文件划分成多个文件。
$ split [-bl] file PREFIX
-b ：以大小来进行分区，可加单位，例如 b, k, m 等
-l ：以行数来进行分区。
- PREFIX ：分区文件的前导名称

grep
g/re/p（globally search a regular expression and print)，使用正则表示式进行全局查找并打印。
$ grep [-acinv] [--color=auto] 搜寻字符串 filename
-c ： 统计匹配到行的个数
-i ： 忽略大小写
-n ： 输出行号
-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行
--color=auto ：找到的关键字加颜色显示


printf 格式化输出


进程管理：
查看进程
ps  查看某个时间点的进程信息
## ps -l
查看系统所有进程
## ps aux
查看特定的进程
## ps aux | grep threadx

pstree 查看进程树
查看所有进程树
## pstree -A

top 实时显示进程信息
每两秒钟刷新一次
## top -d 2

netstat 查看占用端口的进程
## netstat -anp | grep port



孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。
孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成状态收集工作。
由于孤儿进程会被 init 进程收养，所以孤儿进程不会对系统造成危害。


僵尸进程
一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。
如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程。
系统所能使用的进程号是有限的，如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。
要消灭系统中大量的僵尸进程，只需要将其父进程杀死，此时僵尸进程就会变成孤儿进程，从而被 init 进程所收养，这样 init 进程就会释放所有的僵尸进程所占有的资源，从而结束僵尸进程。