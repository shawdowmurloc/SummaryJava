SpringBoot常用注解：
1.@SpringBootApplication:
申明让spring boot自动给程序进行必要的配置，这个配置等同于：
@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。

2.@ResponseBody:
表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api
在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径
而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。
该注解一般会配合@RequestMapping一起使用。

3.@Controller:
用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）
一般这个注解在类中，通常方法需要配合注解@RequestMapping。

4.@RestController:
用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。

5.@RequestMapping:
提供路由信息，负责URL到Controller中的具体函数的映射。

6.@EnableAutoConfiguration:
SpringBoot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。
如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。
你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。

7.@ComponentScan:
表示将该类自动发现扫描组件。
相当于，如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。

8.@Configuration:
相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。

9.@Import:
用来导入其他配置类。

10.@ImportResource:
用来加载xml配置文件。

11.@Autowired:
自动导入依赖的bean
把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。
当加上（required=false）时，就算找不到bean也不报错。
（1）默认按照类型去容器中查找
（2）如果找到多个相同类型的组件，再将属性名作为组件的id去容器中查找

12.@Service:
一般用于修饰service层的组件


13.@Repository:
使用@Repository注解可以确保DAO或者repositories提供异常转译，
这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。

14.@Bean:
用@Bean标注方法等价于XML中配置的bean。
意思是产生一个bean,并交给spring管理。

15.@Value:
注入Spring boot application.properties配置的属性的值。

16.@Inject:
等价于默认的@Autowired，只是没有required属性

17.@Component:
泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。


lombok注解：
1.@Data：
注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法


2.@Getter
注解在属性上；为属性提供 getting 方法

3.@Setter
注解在属性上；为属性提供 setting 方法

4.@Log4j2
注解在类上；为类提供一个 属性名为log 的 log4j 日志对象，和@Log4j注解类似

5.@NoArgsConstructor
注解在类上；为类提供一个无参的构造方法

6.@AllArgsConstructo
注解在类上；为类提供一个全参的构造方法

7.@EqualsAndHashCode:
默认情况下，会使用所有非瞬态(non-transient)和非静态(non-static)字段来生成equals和hascode方法，
也可以指定具体使用哪些属性。

8. @toString
生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割。

9.@RequiredArgsConstructor
部分参数构造器

10.@NonNull
注解在属性上，如果注解了，就必须不能为Null


11.@val
注解在属性上，如果注解了，就是设置为final类型，可查看源码的注释知道


