一.死锁：
死锁产生的四个条件：
（1）互斥（每个资源只能被一个进程占用）。
（2）不可抢占（进程已获得的资源，在末使用完之前，不能强行剥夺）。
（3）占有且等待（一个进程因请求资源而阻塞时，对已获得的资源保持不放）。
（4）循环等待（若干进程之间形成环状的等待）。


死锁恢复：
1.利用抢占恢复
2。利用回滚恢复
3.利用杀死进程恢复



预防死锁：
（1）破坏互斥：使资源同时访问而非互斥使用，就没有进程会阻塞在资源上，从而不发生死锁。
只读数据文件、磁盘等软硬件资源均可采用这种办法管理；
但是许多资源是独占性资源，如可写文件、键盘等只能互斥的占有；
所以这种做法在许多场合是不适用的。
（2）破坏占有且等待条件:
采用静态分配的方式，静态分配的方式是指进程必须在执行之前就申请需要的全部资源，且直至所要的资源全部得到满足后才开始执行。
实现简单，但是严重的减低了资源利用率。
因为在每个进程占有的资源中，有些资源在运行后期使用，有些资源在例外情况下才被使用，可能会造成进程占有一些几乎用不到的资源，而使其他想使用这些资源的进程等待。
（3）剥夺调度能够防止死锁，但是只适用于内存和处理器资源。
方法一：占有资源的进程若要申请新资源，必须主动释放已占有资源，若需要此资源，应该向系统重新申请。
方法二：资源分配管理程序为进程分配新资源时，若有则分配；否则将剥夺此进程已占有的全部资源，并让进程进入等待资源状态，资源充足后再唤醒它重新申请所有所需资源。
（4）破坏循环等待：
给系统的所有资源编号，规定进程请求所需资源的顺序必须按照资源的编号依次进行。
采用层次分配策略，将系统中所有的资源排列到不同层次中
一个进程得到某层的一个资源后，只能申请较高一层的资源
当进程释放某层的一个资源时，必须先释放所占有的较高层的资源
当进程获得某层的一个资源时，如果想申请同层的另一个资源，必须先释放此层中已占有的资源


鸵鸟策略

死锁检测：
1.每种类型一个资源的死锁检测 通过检测有向图是否存在环来实现
2.每种类型多个资源的死锁检测

二.进程与线程
进程是调度资源的基本单位，线程是执行任务的基本单位。
进程有自己独立的数据空间，程序切换开销大。
线程共享一个进程的数据空间，每个线程都有自己的独立运行栈和程序计数器，线程之间的开销较少。
进程之间资源是相互隔离的，线程之间共享资源简单。
线程的出现是为了并发，因为线程上下文切换比较快，可以提高并发效率。

3.为什么线程切换比较快？
最主要的一个区别在于进程切换涉及虚拟地址空间的切换而线程不会。
因为每个进程都有自己的虚拟地址空间，而线程是共享所在进程的虚拟地址空间的，因此同一个进程中的线程进行线程切换时不涉及虚拟地址空间的转换。

4.进程调度算法：
（1）先进先出、非抢占式调度算法，按照请求的顺序进行调度
（2）短作业优先、按估计运行时间最短的顺序进行调度
（3）最短耗时优先、按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。
（4）时间片轮转、将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。
当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。
（5）多级反馈队列、多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，进程在第一个队列没执行完，就会被移到下一个队列。
可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。



三。内存管理
虚拟内存:目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存
操作系统将内存抽象成地址空间，每个程序有自己的地址空间，这个地址空间被分割成很多快
每一块称为一页，这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有的页都在物理内存。

分页系统地址映射：内存管理单元（MMU）管理着地址空间和物理空间的转换，其中页表存储着页和页框的映射表


页面置换算法：在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将给页调入内存中、
如果内存中已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。
页面置换算法主要是使页面置换频率最低。
1.最佳
所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。
2.最近最久未使用 LRU
虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。
LRU 将最近最久未使用的页面换出。
3.最近未使用 NRU
4.先进先出
5.第二次机会算法
6.时钟


分段

段页式
程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。
分页主要用于实现虚拟内存，从而获得更大的地址空间；
分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。




四.设备管理
磁盘调度算法
1.先来先服务 按照磁盘请求的顺序进行调度
2.最短寻道时间优先  优先调度与当前磁头所在磁道距离最近的磁道
3.电梯算法
电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。



五.链接
编译系统： 预处理阶段 编译阶段  汇编阶段  链接阶段

静态链接

目标文件

动态链接
